apiVersion: v1
kind: Service
metadata:
  name: treinapp-reports-svc
spec:
  selector:
    app: treinapp-reports
  ports:
  - port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: treinapp-api-svc-v1
spec:
  selector:
    app: treinapp-api
    version: v1
  ports:
  - port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: treinapp-api-svc-v2
spec:
  selector:
    app: treinapp-api
    version: v2
  ports:
  - port: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: treinapp-reports-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: treinapp-reports
  template:
    metadata:
      labels:
        app: treinapp-reports
    spec:
      containers:
      - name: reports-api
        image: carlosflor25/treinappreportsapi:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "64"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "125m"
        ports:
        - containerPort: 80
        env:
          - name: ASPNETCORE_URLS
            value: http://+:80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: treinapp-api-deployment-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: treinapp-api
      version: v1
  template:
    metadata:
      labels:
        app: treinapp-api
        version: v1
    spec:
      containers:
      - name: api
        image: carlosflor25/treinappapi:latest
        env:
          - name: ConnectionStrings__MongoDb
            value: mongodb://root:imroot@mongodb.default.svc.cluster.local:27017/
          - name: ConnectionStrings__KafkaBootstrap
            value: athena.default.svc.cluster.local:29092
        resources:
          limits:
            memory: "128Mi"
            cpu: "125m"
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: treinapp-api-deployment-v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: treinapp-api
      version: v2
  template:
    metadata:
      labels:
        app: treinapp-api
        version: v2
    spec:
      containers:
      - name: api
        image: carlosflor25/treinappapi:latest
        env:
          - name: ConnectionStrings__MongoDb
            value: mongodb://root:imroot@mongodb.default.svc.cluster.local:27017/
          - name: ConnectionStrings__KafkaBootstrap
            value: athena.default.svc.cluster.local:29092
        resources:
          limits:
            memory: "128Mi"
            cpu: "125m"
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongo-db
  template:
    metadata:
      labels:
        app: mongo-db
    spec:
      containers:
      - name: db
        image: mongo:latest
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: root
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: imroot
        ports:
        - containerPort: 27017
      - name: explorer
        image: mongo-express:latest
        resources:
          limits:
            memory: "64Mi"
            cpu: "50m"
        env:
          - name: ME_CONFIG_MONGODB_ADMINUSERNAME
            value: "root"
          - name: ME_CONFIG_MONGODB_ADMINPASSWORD
            value: imroot
          - name: ME_CONFIG_MONGODB_URL
            value: mongodb://root:imroot@localhost:27017/
        ports:
          - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongo-db
  ports:
  - port: 8081
    name: explorer
  - port: 27017
    name: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: athena
spec:
  selector:
    matchLabels:
      app: athena
  template:
    metadata:
      labels:
        app: athena
    spec:
      containers:
      - name: athena
        image: confluentinc/cp-kafka:latest
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
          - name: KAFKA_BROKER_ID
            value: "1"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: localhost:2181
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://localhost:9092
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: PLAINTEXT
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: "1"
        ports:
        - containerPort: 9092
          name: secondary
        - containerPort: 29092
          name: kafka
      - name: zookeeper
        image: confluentinc/cp-zookeeper:latest
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env: 
          - name: ZOOKEEPER_CLIENT_PORT
            value: "2181"
          - name: ZOOKEEPER_TICK_TIME
            value: "2000"
---
apiVersion: v1
kind: Service
metadata:
  name: athena
spec:
  selector:
    app: athena
  ports:
  - port: 9092
    targetPort: 9092
    name: secondary
  - port: 29092
    targetPort: 29092
    name: primary
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafdrop
spec:
  selector:
    matchLabels:
      app: kafdrop
  template:
    metadata:
      labels:
        app: kafdrop
    spec:
      containers:
      - name: kafdrop
        image: obsidiandynamics/kafdrop:latest
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 9000
---
apiVersion: v1
kind: Service
metadata:
  name: kafdrop
spec:
  selector:
    app: kafdrop
  ports:
  - port: 9000

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mypvc
# spec:
#   resources:
#     requests:
#       storage: {2:<Size>}
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteOnce
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mypvc
# spec:
#   resources:
#     requests:
#       storage: {2:<Size>}
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteOnce
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mypvc
# spec:
#   resources:
#     requests:
#       storage: {2:<Size>}
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteOnce
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: mypv
# spec:
#   capacity:
#     storage: {2:<Size>}
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Recycle
#   storageClassName: slow
#   mountOptions:
#     - hard
#     - nfsvers=4.1
#   nfs:
#     path: /tmp
#     server: 172.17.0.2
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: myapp
# spec:
#   selector:
#     matchLabels:
#       app: myapp
#   template:
#     metadata:
#       labels:
#         app: myapp
#     spec:
#       containers:
#       - name: myapp
#         image: <Image>
#         resources:
#           limits:
#             memory: "128Mi"
#             cpu: "500m"
#         ports:
#         - containerPort: <Port>
