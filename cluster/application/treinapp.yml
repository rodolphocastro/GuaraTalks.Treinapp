apiVersion: v1
kind: Service
metadata:
  name: treinapp-reports-svc
spec:
  selector:
    app: treinapp-reports
  ports:
  - port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: treinapp-api-svc-v1
spec:
  selector:
    app: treinapp-api
    version: v1
  ports:
  - port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: treinapp-api-svc-v2
spec:
  selector:
    app: treinapp-api
    version: v2
  ports:
  - port: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: treinapp-reports-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: treinapp-reports
  template:
    metadata:
      labels:
        app: treinapp-reports
    spec:
      containers:
      - name: reports-api
        image: carlosflor25/treinappreportsapi:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "64"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "125m"
        ports:
        - containerPort: 80
        env:
          - name: ASPNETCORE_URLS
            value: http://+:80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: treinapp-api-deployment-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: treinapp-api
      version: v1
  template:
    metadata:
      labels:
        app: treinapp-api
        version: v1
    spec:
      containers:
      - name: api
        image: carlosflor25/treinappapi:latest
        env:
          - name: ConnectionStrings__MongoDb
            value: mongodb://root:imroot@mongodb.default.svc.cluster.local:27017/
          - name: ConnectionStrings__KafkaBootstrap
            value: stream.kafka.svc.cluster.local:9094
        resources:
          limits:
            memory: "128Mi"
            cpu: "125m"
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: treinapp-api-deployment-v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: treinapp-api
      version: v2
  template:
    metadata:
      labels:
        app: treinapp-api
        version: v2
    spec:
      containers:
      - name: api
        image: carlosflor25/treinappapi:latest
        env:
          - name: ConnectionStrings__MongoDb
            value: mongodb://root:imroot@mongodb.default.svc.cluster.local:27017/
          - name: ConnectionStrings__KafkaBootstrap
            value: stream.kafka.svc.cluster.local:9094
        resources:
          limits:
            memory: "128Mi"
            cpu: "125m"
        ports:
        - containerPort: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata: 
  name: treinapp-api-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: treinapp-api-deployment-v2
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  # - type: Pods
  #   pods:
  #     metric:
  #       name: packets-per-second
  #     target:
  #       type: AverageValue
  #       averageValue: 1k
  # - type: Object
  #   object:
  #     metric:
  #       name: requests-per-second
  #     describedObject:
  #       apiVersion: networking.k8s.io/v1beta1
  #       kind: Ingress
  #       name: main-route
  #     target:
  #       type: Value
  #       value: 10k

  # Then, your HorizontalPodAutoscaler would attempt to ensure that each pod was consuming roughly 50% of its requested CPU, serving 1000 packets per second, and that all pods behind the main-route Ingress were serving a total of 10000 requests per second.